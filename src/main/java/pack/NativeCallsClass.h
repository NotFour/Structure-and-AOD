/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class pack_NativeCallsClass */

#ifndef _Included_pack_NativeCallsClass
#define _Included_pack_NativeCallsClass
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     pack_NativeCallsClass
 * Method:    printOne
 * Signature: ()V
 */
/*JNIEXPORT void JNICALL Java_pack_NativeCallsClass_printOne
  (JNIEnv *, jclass);

*//*
 * Class:     pack_NativeCallsClass
 * Method:    printTwo
 * Signature: ()V
 *//*
JNIEXPORT void JNICALL Java_pack_NativeCallsClass_printTwo
  (JNIEnv *, jclass);*/
  class pack_NativeCallsClass{
    struct tree{
        char letter;
        tree* right;
        tree* down;
    };
    int start=null;
    public: bool res=false;
    addEnd(){
        tree* p = start;
        int i=0;
        while(i<word.Length()){
            i++;
            if(p->letter==word[i])
                p=p->down;
            else{
                if(p->right){
                p=p->right;
                    i--;
                }else{
                    p->right = new tree();
                    p=p->right;
                    p->letter = word[i];
                    p->right = 0;
                    p->down = 0;
                    while(i<word.Length()){
                        i++;
                        p->down = new tree();
                        p=p->down;
                        p->letter = word[i];
                        p->right = 0;
                        p->down = 0;
                    }
                    res = true;
                }

            }
        }
    }
    bool search(String word){
        bool res = true;
        tree* p = start;
        int i=0;
        bool proverka = true;
        while(i<word.length()){
            i++;
            if(p->letter == word[i])
                if(p->down){
                    p=p->down;
                }else{
                    proverka = false;
                    break;
                }
                else{
                    if(p->right){
                        p=p->right;
                        i--;
                    }else{
                        proverka = false;
                        break;
                    }
                }
        }
        if((!proverka)&&(i<=word.Length())&&((p->letter!='\n')||(word[i]!='\n')))
            res = false;
        return res;
    }
    void del(tree* p){
        if(p){
            del(p->right);
            del(p->down);
            delete p;
        }
    }
  }

#ifdef __cplusplus
}
#endif
#endif